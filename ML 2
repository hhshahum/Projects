{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# COMP90051 Project 2 - Student Id 1020849"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Do not edit. These are the only imports permitted.\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from numpy.linalg import inv\n",
    "import matplotlib.pyplot as plt\n",
    "from abc import ABC, abstractmethod"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Implementing Îµ-Greedy and UCB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MAB(ABC):\n",
    "    \"\"\"\n",
    "    Abstract class that represents a multi-armed bandit (MAB)\n",
    "    \"\"\"\n",
    "    \n",
    "    @abstractmethod\n",
    "    def play(self, tround, context):\n",
    "        \"\"\"\n",
    "        Play a round\n",
    "        \n",
    "        Arguments\n",
    "        =========\n",
    "        tround : int\n",
    "            positive integer identifying the round\n",
    "        \n",
    "        context : 1D float array, shape (self.ndims * self.narms), optional\n",
    "            context given to the arms\n",
    "        \n",
    "        Returns\n",
    "        =======\n",
    "        arm : int\n",
    "            the positive integer arm id for this round\n",
    "        \"\"\"\n",
    "    \n",
    "    @abstractmethod\n",
    "    def update(self, arm, reward, context):\n",
    "        \"\"\"\n",
    "        Updates the internal state of the MAB after a play\n",
    "        \n",
    "        Arguments\n",
    "        =========\n",
    "        arm : int\n",
    "            a positive integer arm id in {1, ..., self.narms}\n",
    "        \n",
    "        reward : float\n",
    "            reward received from arm\n",
    "        \n",
    "        context : 1D float array, shape (self.ndims * self.narms), optional\n",
    "            context given to arms\n",
    "        \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per the reference from the lecture Slides, I have done the implementations\n",
    "#A random value for epsilon is generated and if its less than the given epsilon we generate the value randomly uniformly or else we proceed ahead.\n",
    "#In the following steps, we take the value and its count to calculate its average\n",
    "#The arm corresponding to the highest average value is returned\n",
    "#The update function works as and when it is called and we add the corresponding reward and its count\n",
    "\n",
    "\n",
    "\n",
    "avgdict={}            #store the average value \n",
    "count={}             #store the count of the values for calculating average\n",
    "ret={}               #Final values to be returned\n",
    "\n",
    "class EpsGreedy(MAB):\n",
    "     \n",
    "    \"\"\"\n",
    "    Epsilon-Greedy multi-armed bandit\n",
    "\n",
    "    Arguments\n",
    "    =========\n",
    "    narms : int\n",
    "        number of arms\n",
    "\n",
    "    epsilon : float\n",
    "        explore probability\n",
    "\n",
    "    Q0 : float, optional\n",
    "        initial value for the arms\n",
    "        \n",
    "    \"\"\"\n",
    "    def __init__(self, narms, epsilon, Q0=np.inf):\n",
    "        self.narms=narms\n",
    "        self.epsilon=epsilon\n",
    "        self.Q0=Q0\n",
    "        \n",
    "        #Initialise the Average dictionary with Q0 as we consider no arm has been visited yet\n",
    "        for i in range(1,narms+1):\n",
    "            avgdict[i]=self.Q0\n",
    "           \n",
    "    def play(self, tround, context=None):\n",
    "        context=None\n",
    "        num = np.random.rand(1)\n",
    "        if(num<self.epsilon):\n",
    "            return int((np.random.uniform(1,self.narms+1)))\n",
    "        else:\n",
    "            for key,value in avgdict.items():\n",
    "                ret[key] = value/count.get(key,1)\n",
    "            #the next 4 lines helps us to return an arm, solving the issue for tie as well\n",
    "            maxv = max(ret.values())\n",
    "            new_list = [k for k, v in ret.items() if v == maxv]\n",
    "            new_list.sort()\n",
    "            return(int(np.random.randint(new_list[0],new_list[len(new_list)-1]+1)))\n",
    "            \n",
    "    def update(self, arm, reward, context=None):\n",
    "        if (arm in avgdict) and (arm in count):\n",
    "            avgdict[arm] += reward\n",
    "            count[arm] +=1\n",
    "        else:\n",
    "            avgdict[arm] = reward\n",
    "            count[arm]=1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per the reference from the lecture Slides, I have done the implementations\n",
    "#Minor difference in the implementation part of Epsilon greedy and UCB\n",
    "#In the following steps, we take the value and its count to calculate its average\n",
    "#rho value is considered and the correspondong square root is taken as per the formula\n",
    "#The arm corresponding to the highest value after all the operations are performed is returned\n",
    "#The update function works as and when it is called and we add the corresponding reward and its count\n",
    "\n",
    "avgdict={}             #store the average value \n",
    "count={}               #store the count of the values for calculating average            \n",
    "ret={}                 #to store the intermediate values during execution\n",
    "fin={}                 #final values to be returned \n",
    "\n",
    "class UCB(MAB):\n",
    "    \"\"\"\n",
    "    Upper Confidence Bound (UCB) multi-armed bandit\n",
    "\n",
    "    Arguments\n",
    "    =========\n",
    "    narms : int\n",
    "        number of arms\n",
    "\n",
    "    rho : float\n",
    "        positive real explore-exploit parameter\n",
    "\n",
    "    Q0 : float, optional\n",
    "        initial value for the arms\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, narms, rho, Q0=np.inf):\n",
    "\n",
    "        self.narms=narms\n",
    "        self.rho=rho\n",
    "        self.Q0=Q0\n",
    "        #Initialise the Average dictionary with Q0 as we consider no arm has been visited yet\n",
    "        for i in range(1,narms+1):\n",
    "            avgdict[i]=self.Q0\n",
    "        \n",
    "    def play(self, tround, context=None):\n",
    "        for key,value in avgdict.items():\n",
    "            ret[key] = value/count.get(key,1)\n",
    "            fin[key] = ret.get(key,1) + np.sqrt((self.rho*np.log(tround)) / count.get(key,1))\n",
    "        #the next 4 lines helps us to return an arm, solving the issue for tie as well\n",
    "        maxv = max(fin.values())\n",
    "        new_list = [k for k, v in fin.items() if v == maxv]\n",
    "        new_list.sort()\n",
    "        return(int(np.random.uniform(new_list[0],new_list[len(new_list)-1]+1)))\n",
    "        \n",
    "    def update(self, arm, reward, context=None):\n",
    "        if (arm in avgdict) and (arm in count):\n",
    "            avgdict[arm] += reward\n",
    "            count[arm] +=1\n",
    "        else:\n",
    "            avgdict[arm] = reward\n",
    "            count[arm]=1\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. The Basic Thompson Bandit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#As per the reference from the mentioned paper the implementation is done.\n",
    "#This is based on the principle of Bernoulli bandits i.e. the reward is either 0 or 1\n",
    "#Here, the si stands for successes (reward=1) and fi stands for failures (reward=0)\n",
    "#We generate a beta distribution and consider the arm with the maximum corresponding value generated by beta distribution randomly \n",
    "#The update function works as and when it is called and we add the successes in si and failures in fi with respect to each arm\n",
    "\n",
    "randombeta={}  #store values after the sample is generated\n",
    "si={}          #store the successes\n",
    "fi={}          #store the failures\n",
    "class BetaThompson(MAB):\n",
    "    \"\"\"\n",
    "    Beta-Bernoulli Thompson sampling multi-armed bandit\n",
    "\n",
    "    Arguments\n",
    "    =========\n",
    "    narms : int\n",
    "        number of arms\n",
    "\n",
    "    alpha0 : float, optional\n",
    "        positive real prior hyperparameter\n",
    "\n",
    "    beta0 : float, optional\n",
    "        positive real prior hyperparameter\n",
    "    \"\"\"\n",
    "    def __init__(self, narms, alpha0=1.0, beta0=1.0):\n",
    "        self.narms=narms\n",
    "        self.alpha0=alpha0\n",
    "        self.beta0=beta0\n",
    "        for i in range(1,self.narms+1):\n",
    "            randombeta[i]=np.random.beta(self.alpha0,self.beta0,size=self.narms)\n",
    "            si[i]=0\n",
    "            fi[i]=0\n",
    "        \n",
    "       \n",
    "    def play(self, tround, context=None):\n",
    "        for i in range(1,self.narms+1):\n",
    "            #Generating a beta distribution for all the arms randomly \n",
    "            randombeta[i] = np.random.beta(si[i]+self.alpha0, fi[i]+self.beta0)\n",
    "        #the next 4 lines helps us to return an arm, solving the issue for tie as well\n",
    "        maxv = max(randombeta.values())\n",
    "        new_list = [k for k, v in randombeta.items() if v == maxv]\n",
    "        new_list.sort()\n",
    "        return(int(np.random.uniform(new_list[0],new_list[len(new_list)-1]+1)))\n",
    "\n",
    "        \n",
    "    def update(self, arm, reward, context=None):\n",
    "        if (arm in si) and (arm in fi):\n",
    "            #This case we consider only for bernoulli bandits, so we are checking for 0 and 1 only.\n",
    "            if(reward==1):\n",
    "                si[arm]+=reward\n",
    "            elif(reward==0):\n",
    "                fi[arm]+=reward\n",
    "        else:\n",
    "            if(reward==1):\n",
    "                si[arm]=reward\n",
    "            elif(reward==0):\n",
    "                fi[arm]=reward\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Off-Policy Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This is the main running function \n",
    "#The datset is loaded and the arms, rewards and contexts are extracted\n",
    "#The play function is called with the corresponding tround and the contexts for the particular round\n",
    "#If the arm from the play fucntion matches our dataset we call the update function and do the further processing\n",
    "#This is done until we get \"nrounds\" number of matches from the datatset\n",
    "\n",
    "data = np.loadtxt(fname=\"dataset.txt\") #Loading the sample validation dataset\n",
    "def offlineEvaluate(mab, arms, rewards, contexts, nrounds):\n",
    "    \"\"\"\n",
    "    Offline evaluation of a multi-armed bandit\n",
    "    \n",
    "    Arguments\n",
    "    =========\n",
    "    mab : instance of MAB\n",
    "    \n",
    "    arms : 1D int array, shape (nevents,) \n",
    "        integer arm id for each event\n",
    "    \n",
    "    rewards : 1D float array, shape (nevents,)\n",
    "        reward received for each event\n",
    "    \n",
    "    contexts : 2D float array, shape (nevents, mab.narms*nfeatures)\n",
    "        contexts presented to the arms (stacked horizontally) \n",
    "        for each event.\n",
    "        \n",
    "    nrounds : int, optional\n",
    "        number of matching events to evaluate `mab` on.\n",
    "    \n",
    "    Returns\n",
    "    =======\n",
    "    out : 1D float array\n",
    "        rewards for the matching events\n",
    "    \"\"\"\n",
    "\n",
    "    arms=data[:,[0]]\n",
    "    maxarm = max(arms)\n",
    "    maxarm = maxarm[0].astype(int)\n",
    "    rewards=data[:,[1]]\n",
    "    contexts=data[:,2:102]\n",
    "    out=list()\n",
    "    a=0\n",
    "    r=0\n",
    "    tround=0\n",
    "\n",
    "    for i in range(1,len(data)):\n",
    "        start1 = maxarm * (arms[i].astype(int)-1)\n",
    "        a=mab.play(tround+1,(contexts[i][start1[0]:start1[0]+maxarm]))\n",
    "        if(a==arms[i]): #if the value of the arm generated by play matches the arm form our dataset then update else not\n",
    "            tround+=1 \n",
    "            mab.update(a,rewards[i],contexts[i][start1[0]:start1[0]+maxarm])\n",
    "            r=r+rewards[i]\n",
    "            out.append(rewards[i])\n",
    "            if(len(out)==nrounds):\n",
    "                break\n",
    "        else:\n",
    "            continue\n",
    "    return out\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EpsGreedy average reward 0.09625\n"
     ]
    }
   ],
   "source": [
    "mab = EpsGreedy(10, 0.05)\n",
    "results_EpsGreedy = offlineEvaluate(mab, arms, rewards, contexts, 800)\n",
    "print('EpsGreedy average reward', np.mean(results_EpsGreedy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UCB average reward 0.115\n"
     ]
    }
   ],
   "source": [
    "mab = UCB(10, 1.0)\n",
    "results_UCB = offlineEvaluate(mab, arms, rewards, contexts, 800)\n",
    "print('UCB average reward', np.mean(results_UCB))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BetaThompson average reward 0.21625\n"
     ]
    }
   ],
   "source": [
    "mab = BetaThompson(10, 1.0, 1.0)\n",
    "results_BetaThompson = offlineEvaluate(mab, arms, rewards, contexts, 800)\n",
    "print('BetaThompson average reward', np.mean(results_BetaThompson))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Contextual Bandits - LinUCB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Contextual Bandits - 1\n",
    "#As per the reference paper, the implementations are done\n",
    "#The names of variables and the storage structures are exactly as per the pseudo code in the paper.\n",
    "#p is the final variable in which all the final computations are stored before the arm gets returned\n",
    "#thetahat as the predictive variance for rewards with respect to each arm\n",
    "#context variable directly referred (x in the algorithm)\n",
    "#self.alpha (hyperparameter) as passed directly with the function call\n",
    "#Reshaping used to convert the vectors to (n,) to its desired shape\n",
    "\n",
    "Aa={}\n",
    "ba={}\n",
    "thetahat={}\n",
    "thetahat1={}\n",
    "p = {}\n",
    "p1={}\n",
    "\n",
    "class LinUCB(MAB):\n",
    "    \"\"\"\n",
    "    Contextual multi-armed bandit (LinUCB)\n",
    "\n",
    "    Arguments\n",
    "    =========\n",
    "    narms : int\n",
    "        number of arms\n",
    "\n",
    "    ndims : int\n",
    "        number of dimensions for each arm's context\n",
    "\n",
    "    alpha : float\n",
    "        positive real explore-exploit parameter\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, narms, ndims, alpha):\n",
    "        self.narms=narms\n",
    "        self.ndims=ndims\n",
    "        self.alpha=alpha\n",
    "        \n",
    "        \n",
    "    def play(self, tround, context):\n",
    "        for i in range(1,self.narms+1):\n",
    "            if i not in Aa:\n",
    "                Aa[i]=np.identity(self.ndims)  \n",
    "                ba[i]=[0]*self.ndims\n",
    "            thetahat[i] = np.linalg.inv(Aa[i]) @ ba[i]\n",
    "            thetahat1[i]=thetahat[i].reshape(self.narms,1)\n",
    "            p[i] = (thetahat1[i].transpose() @ context) + self.alpha *np.sqrt(context.transpose() @ np.linalg.inv(Aa[i]) @ context)  \n",
    "            p1[i] = p[i].reshape(1,1)\n",
    "        #the next 4 lines helps us to return an arm, solving the issue for tie as well\n",
    "        \n",
    "        maxv = max(p1.values())\n",
    "        new_list = [k for k, v in p1.items() if v == maxv]\n",
    "        new_list.sort()\n",
    "        return(int(np.random.uniform(new_list[0],new_list[len(new_list)-1]+1))) \n",
    "        \n",
    "    def update(self, arm, reward, context):\n",
    "        if (arm in Aa) and (arm in ba):\n",
    "            Aa[arm] = Aa[arm] + (context @ context.transpose())\n",
    "            ba[arm] = ba[arm] + reward* context\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinUCB average reward 0.31625\n"
     ]
    }
   ],
   "source": [
    "mab = LinUCB(10, 10, 1.0)\n",
    "results_LinUCB = offlineEvaluate(mab, arms, rewards, contexts, 800)\n",
    "print('LinUCB average reward', np.mean(results_LinUCB))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Contextual Bandits - LinThompson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Contextual Bandits - 2\n",
    "#As per the paper, the implementations are done\n",
    "#The names of variables and the storage structures are exactly as per the pseudo code in the paper.\n",
    "#Here mutround is the mu hat (t) value for the parituclar round. It gets updated as round progresses further.\n",
    "#bmat is the B matrix in the algorithm\n",
    "#muhat is the mu cap in the algorithm\n",
    "#Multi variate distribution because we had to consider Gaussian\n",
    "#fvec as f\n",
    "#checkmax which is used to extract the arm played based on the values it receives (max of all)\n",
    "\n",
    "checkmax={}\n",
    "checkmax1={}\n",
    "muhat={}\n",
    "fvec={}\n",
    "bmat={}\n",
    "mutround={}\n",
    "class LinThompson(MAB):\n",
    "    \"\"\"\n",
    "    Contextual Thompson sampled multi-armed bandit (LinThompson)\n",
    "\n",
    "    Arguments\n",
    "    =========\n",
    "    narms : int\n",
    "        number of arms\n",
    "\n",
    "    ndims : int\n",
    "        number of dimensions for each arm's context\n",
    "\n",
    "    v : float\n",
    "        positive real explore-exploit parameter\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, narms, ndims, v):\n",
    "        self.narms=narms\n",
    "        self.ndims=ndims\n",
    "        self.v=v\n",
    "        \n",
    "        for i in range(1,self.narms+1):\n",
    "            muhat[i]=[0]*self.ndims\n",
    "            fvec[i]=[0]*self.ndims\n",
    "            bmat[i]=np.identity(self.ndims)\n",
    "        \n",
    "    def play(self, tround, context):\n",
    "        for i in range(1,self.narms+1):\n",
    "            mutround[i] = np.random.multivariate_normal(muhat[i],((self.v**2)*np.linalg.inv(bmat[i])))\n",
    "            checkmax[i]=context.transpose() @ mutround[i]\n",
    "        #the next 4 lines helps us to return an arm, solving the issue for tie as well\n",
    "        maxv = max(checkmax.values())\n",
    "        new_list = [k for k, v in checkmax.items() if v == maxv]\n",
    "        new_list.sort()\n",
    "        return(int(np.random.uniform(new_list[0],new_list[len(new_list)-1]+1))) \n",
    "    \n",
    "    def update(self, arm, reward, context):\n",
    "        bmat[arm] = bmat[arm] + (context@context.transpose())\n",
    "        fvec[arm] = fvec[arm] + (context*reward)\n",
    "        muhat[arm] = np.linalg.inv(bmat[arm]) @ fvec[arm]\n",
    "            \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinThompson average reward 0.3275\n"
     ]
    }
   ],
   "source": [
    "mab = LinThompson(10, 10, 1.0)\n",
    "results_LinThompson = offlineEvaluate(mab, arms, rewards, contexts, 800)\n",
    "print('LinThompson average reward', np.mean(results_LinThompson))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Evaluation\n",
    "### 6.A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x27e25004940>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mab1 = EpsGreedy(10, 0.05)\n",
    "results_EpsGreedy1 = offlineEvaluate(mab1, arms, rewards, contexts, 800)\n",
    "ans1 = np.array(np.cumsum(results_EpsGreedy1))\n",
    "mab2 = UCB(10, 1.0)\n",
    "results_UCB2 = offlineEvaluate(mab2, arms, rewards, contexts, 800)\n",
    "ans2 = np.array(np.cumsum(results_UCB2))\n",
    "mab3 = BetaThompson(10, 1.0, 1.0)\n",
    "results_BetaThompson3 = offlineEvaluate(mab3, arms, rewards, contexts, 800)\n",
    "ans3 = np.array(np.cumsum(results_BetaThompson3))\n",
    "mab4 = LinUCB(10, 10, 1.0)\n",
    "results_LinUCB4 = offlineEvaluate(mab4, arms, rewards, contexts, 800)\n",
    "ans4 = np.array(np.cumsum(results_LinUCB4))\n",
    "mab5 = LinThompson(10, 10, 1.0)\n",
    "results_LinThompson5 = offlineEvaluate(mab5, arms, rewards, contexts, 800)\n",
    "ans5 = np.array(np.cumsum(results_LinThompson5))\n",
    "plt.plot(ans1,ls='--',c='b',label='Epsilon Greedy')\n",
    "plt.plot(ans2,ls='--',c='g',label='UCB')\n",
    "plt.plot(ans3,ls='--',c='r',label='Beta Thompson')\n",
    "plt.plot(ans4,ls='--',c='k',label='Lin UCB')\n",
    "plt.plot(ans5,ls='--',c='m',label='Lin Thompson')\n",
    "plt.xlabel('Number of rounds')\n",
    "plt.ylabel('Cumulative Rewards')\n",
    "plt.title('5 Algorithms')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.B."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinUCB with value of alpha = 0.0 And it\"s average reward is: 0.29875\n",
      "LinUCB with value of alpha = 0.3 And it\"s average reward is: 0.3075\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\figure.py:98: MatplotlibDeprecationWarning: \n",
      "Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
      "  \"Adding an axes using the same arguments as a previous axes \"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LinUCB with value of alpha = 0.6 And it\"s average reward is: 0.31125\n",
      "LinUCB with value of alpha = 0.8999999999999999 And it\"s average reward is: 0.31\n",
      "LinUCB with value of alpha = 1.2 And it\"s average reward is: 0.31375\n",
      "LinUCB with value of alpha = 1.5 And it\"s average reward is: 0.315\n",
      "LinUCB with value of alpha = 1.7999999999999998 And it\"s average reward is: 0.31125\n",
      "LinUCB with value of alpha = 2.1 And it\"s average reward is: 0.31625\n",
      "LinUCB with value of alpha = 2.4 And it\"s average reward is: 0.3125\n",
      "LinUCB with value of alpha = 2.6999999999999997 And it\"s average reward is: 0.31\n",
      "LinUCB with value of alpha = 3.0 And it\"s average reward is: 0.3125\n",
      "LinThompson with value of v = 0.0 And it\"s average reward is: 0.27875\n",
      "LinThompson with value of v = 0.3 And it\"s average reward is: 0.28375\n",
      "LinThompson with value of v = 0.6 And it\"s average reward is: 0.31875\n",
      "LinThompson with value of v = 0.8999999999999999 And it\"s average reward is: 0.275\n",
      "LinThompson with value of v = 1.2 And it\"s average reward is: 0.2725\n",
      "LinThompson with value of v = 1.5 And it\"s average reward is: 0.1925\n",
      "LinThompson with value of v = 1.7999999999999998 And it\"s average reward is: 0.28625\n",
      "LinThompson with value of v = 2.1 And it\"s average reward is: 0.28875\n",
      "LinThompson with value of v = 2.4 And it\"s average reward is: 0.2425\n",
      "LinThompson with value of v = 2.6999999999999997 And it\"s average reward is: 0.2675\n",
      "LinThompson with value of v = 3.0 And it\"s average reward is: 0.28375\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_LinUCBralpha={}\n",
    "ansralpha={}\n",
    "ansrv={}\n",
    "results_LinThompsonralpha={}\n",
    "\n",
    "#We can optimise parameters in two ways (two basic strategies)\n",
    "#1. Grid Searching of hyperparameters\n",
    "#2. Random Searching of hyperparameters\n",
    "\n",
    "#We are focusing on grid based searching strategies\n",
    "#Considering range of \"alpha\" for the Lin UCB and range of \"v\" for Lin Thompson\n",
    "\n",
    "\n",
    "#Lin UCB, range of alpha is 0-3 with step 0.3\n",
    "for i in np.arange(0.0,3.1,0.3):\n",
    "    mabralpha = LinUCB(10, 10, i)\n",
    "    results_LinUCBralpha[i] =(offlineEvaluate(mabralpha, arms, rewards, contexts, 800))\n",
    "    print('LinUCB with value of alpha = '+str(i)+ ' And it\"s average reward is:', np.mean(results_LinUCBralpha[i]))\n",
    "    ansralpha[i] = np.array(np.cumsum(results_LinUCBralpha[i]))\n",
    "    plt.subplot(1,3,1)\n",
    "    plt.plot(ansralpha[i])\n",
    "    plt.xlabel('Number of rounds')\n",
    "    plt.ylabel('Cumulative Rewards')\n",
    "    plt.title('Lin UCB')\n",
    "\n",
    "#Lin Thompson, range of v is 0-3 with step 0.3\n",
    "for i in np.arange(0.0,3.1,0.3): \n",
    "    rv = LinThompson(10, 10, i)\n",
    "    results_LinThompsonralpha[i] = offlineEvaluate(rv, arms, rewards, contexts, 800)\n",
    "    print('LinThompson with value of v = '+str(i)+ ' And it\"s average reward is:', np.mean(results_LinThompsonralpha[i]))\n",
    "    ansrv[i] = np.array(np.cumsum(results_LinThompsonralpha[i]))\n",
    "    plt.subplot(1,3,3)\n",
    "    plt.plot(ansrv[i])\n",
    "    plt.xlabel('Number of rounds')\n",
    "    plt.ylabel('Cumulative Rewards')\n",
    "    plt.title('Lin Thompson')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
